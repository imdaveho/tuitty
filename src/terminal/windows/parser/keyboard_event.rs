use winapi::shared::minwindef::WORD;
use winapi::um::wincon::{ KEY_EVENT_RECORD, KEY_EVENT_RECORD_uChar };
use super::input_event::ControlKeyState;

// Describes a keyboard input event in a console INPUT_RECORD structure.
// https://docs.microsoft.com/en-us/windows/console/key-event-record-str
struct KeyEventRecord {
    // If the key is pressed, this member is TRUE. Otherwise, this member is
    // FALSE (the key is released).
    pub key_down: bool,
    // The repeat count, which indicates that a key is being held down.
    // For example, when a key is held down, you might get five events with this
    // member equal to 1, one event with this member equal to 5, or multiple
    // events with this member greater than or equal to 1.
    pub repeat_count: u16,
    // A virtual-key code that identifies the given key device-independently.
    pub virtual_key_code: WORD,
    // The virtual scan code of the given key that represents the device-
    // dependent value generated by the keyboard hardware.
    pub virtual_scan_code: u16,
    // A union of the following members.
    //
    // - UnicodeChar
    //   Translated Unicode character.
    //
    // - AsciiChar
    //  Translated ASCII character.
    pub u_char: KEY_EVENT_RECORD_uChar,
    /// The state of the control keys.
    pub control_key_state: ControlKeyState,
}

impl From<KEY_EVENT_RECORD> for KeyEventRecord {
    fn from(event: KEY_EVENT_RECORD) -> Self {
        KeyEventRecord {
            key_down: event.bKeyDown == 1,
            repeat_count: event.wRepeatCount,
            virtual_key_code: event.wVirtualKeyCode,
            virtual_scan_code: event.wVirtualScanCode,
            u_char: event.uChar,
            control_key_state: ControlKeyState(event.dwControlKeyState),
        }
    }
}
